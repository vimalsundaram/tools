Patterns
The following patterns MUST be used when applicable.

Idempotency
Idempotency is an important aspect of building a fault-tolerant API. Idempotent APIs enable clients to safely retry an operation without worrying about the side-effects that the operation can cause. For example, a client can safely retry an idempotent request in the event of a request failing due to a network connection error.

Per HTTP Specification, a method is idempotent if the side-effects of more than one identical requests are the same as those for a single request. Methods GET, HEAD, PUT and DELETE (additionally, TRACE and OPTIONS) are defined idempotent.

POST operations by definition are neither safe nor idempotent.

All service implementations MUST ensure that safe and idempotent behaviour of HTTP methods is implemented as per HTTP Specification. Services that require idempotency for POST operations MUST be implemented as per the Idempotency for POST requests guidelines.

Idempotency for POST requests

POST operations by definition are not idempotent which means that executing POST more than once with the same input creates as many resources. To avoid creation of duplicate resources, an API SHOULD implement the protocol defined in the section below. This guarantees that only one record is created for the same input payload.

For many use-cases that require idempotency for POST requests, creation of a duplicate record is a severe problem. For example, duplicate records for the use-cases that create or execute a payment on a comp account are not allowed by definition.

Given below is the protocol sequence to support POST idempotency in an API:

To track an idempotent request, a unique idempotency key is used and sent in every request. The header comp-Request-Id MUST be used to add the idempotency key to every request.
For the very first request from the client:

On the client side: The API client sends a new POST request with the comp-Request-Id header that contains the idempotency key.

POST v1/payments/referenced-payouts-items HTTP/1.1
Host: www.api.comp.com
Content-Type: application/json
Authorization: Bearer oauth2_token
comp-Request-Id: 123e4567-e89b-12d3-a456-426655440000


{
    "reference_id": "4766687568468",
    "reference_type": "egflf465vbk7468mvnb"
}
On the server side: If the call is successful and leads to a resource creation, the service MUST return a 201 response to indicate both success and a change of state.

Sample response:

HTTP/1.1 201 CREATED
Content-Type: application/json

{

  "item_id": "CDZEC5MJ8R5HY",
  "links": [{
      "href": "https://api.comp.com/v1/payments/referenced-payouts-items/CDZEC5MJ8R5HY",
      "rel": "self",
      "method": "GET"
  }]
}
For subsequent requests from the client with same input payload:

On the client side: The API client sends a POST request with the same idempotency key and input body as before.

POST v1/payments/referenced-payouts-items HTTP/1.1
Host: www.api.comp.com
Content-Type: application/json
Authorization: Bearer oauth2_token
comp-Request-Id: 123e4567-e89b-12d3-a456-426655440000


{
    "reference_id": "4766687568468",
    "reference_type": "egflf465vbk7468mvnb"
}
On the server side: The server, after checking that the call is identical to the first execution, MUST return a 200 response with a representation of the resource to indicate that the request has already been processed successfully.

Sample response:

HTTP/1.1 200 CREATED
Content-Type: application/json

{
    "item_id": "CDZEC5MJ8R5HY",
    "processing_state": {
        "status": "PROCESSING"
    },
    "reference_id": "4766687568468",
    "reference_type": "egflf465vbk7468mvnb",
    "payout_amount": {
        "currency_code": "USD",
        "value": "2.0"
    },
    "payout_destination": "9C8SEAESMWFKA",
    "payout_transaction_id": "35257aef-54f7-43cf-a258-3b45caf3293",
    "links": [{
                "href": "https://api.comp.com/v1/payments/referenced-payouts-items/CDZEC5MJ8R5HY",
                "rel": "self",
                "method": "GET"
            }]
}
Note: For all of the above scenarios, the API server MAY send back the idempotency key as part of comp-Request-Id header in the response.

Strict versus Weak Idempotency

At times, there are use-cases where duplicate record creation is not a severe problem. If the client-request is missing a comp-Request-Id header, it treats the request as a regular POST request which, in turn, leads to a new resource creation every time the POST request is executed.

Uniqueness of Idempotency Key

The idempotency key that is supplied as part of every POST request MUST be unique and can not be reused with another request with a different input payload. See Error Scenarios to understand the server behavior for repeating idempotency keys in requests.

How to make the key unique is up to the client and it's agreed protocol with the server. It is recommended that UUID or a similar random identifier be used as the idempotency key.

It is also recommended that the server implements the idempotency keys to be time-based and, thus, be able to purge or delete a key upon its expiry.

Error Scenarios

If the comp-Request-Id header is missing for an idempotent request, the service MUST reply with a 400 error with an information_link pointing to the public documentation about this pattern.
If there is an attempt to reuse an idempotency key with a different request payload, the service MUST reply with a 422 error with an information_link pointing to the public documentation about this pattern.
For other errors, the service MUST return the appropriate error message.
Linking
For understanding various Linking patterns see PPaaS HATEOAS Patterns. See PPaaS Hypermedia documentation to learn how to define links in schemas.

Controller Resources
Controller (aka Procedural) resources challenge the fundamental notion or concept of resource orientation where resources usually represent entities or things in a domain system. Given below are the set of guidelines for modelling controller resources.

The generic use-case drivers for controller resources are:

When it is required to execute a processing function on the server from a set of inputs (client provided input or based on data from the server's information store or from an external information store).
When it is required to combine one or more operations and execute them in an atomic fashion (aka a composite controller operation).
When you want to hide a multi-step business process operation from a client to avoid unnecessary coupling between a client and server.
Controller resource naming

Because a controller operation represents an action or a processing function in the server, it is more intuitive to express it using an English verb, i.e. the action itself as the resource name. There are many styles that you can use to define a controller resource. For PPaaS services you can use one of the following styles when defining a controller resource.

If the controller action is always in the context of a parent resource, then it should be expressed as a sub-resource (using a /) of the parent resource (e.g. v1/identity/external-profiles/{id}/confirm).

If the controller action is not associated with any resource context, you can express it as an independent resource at the namespace level (/v1/credit/assess-eligibility).

When an action is in the context of a resource collection, express it as an independent resource at the namespace level. The controller resource name in such cases SHOULD be composed of the action (an English verb) that the controller represent and the name of the collection resource. For example, if you want to express a search operation for deposits, the controller resource SHOULD read as v1/customer/search-deposits.

Note: A controller action is a terminal resource. A sub-resource for a controller resource is thus undefined and invalid. For the same reason, you SHOULD never define a sub-resource to a controller resource. It is also important to scope a controller to the minimum possible level of nesting in order to avoid resource pollution as such resources are use-case or action centric.

HTTP verbs for controller operations

In general,for most cases the HTTP POST verb SHOULD be used as the default method for executing a controller operation.

In scenarios where it is desired that the response of a controller operation be cache-able, GET SHOULD be used to execute the controller. For example,you can use a GET operation (GET /calculate-shortest-path?from=x & to=y) to calculate the shortest path between two nodes (origin and destination). The result of the GET operation is a collection of routes and their maps so you would like to cache the map for future use (GET /retrieve).

HTTP status codes for controller operations

In general, the following response codes can be used for a controller operation.

200- This is the default status code for any controller operation. The response MUST contain a body that describes the result of a controller operation.

201- If the controller operation leads to creation of a resource. If a composite controller is used to create one or more resources and it is not possible to expresss them as a composite record, you MAY instead use 200 as response code.

204- If the server declines to return anything as part of a controller action (Most of the out-of-band actions fall in this category. e.g. v1/users/{id}/notify).

For errors, appropriate 4XX or 5XX error codes MAY be returned.

Resource Collections
A resource may return a list of items (e.g., a list of transactions, the content of a cart, etc.). If the service allows partial retrieval of the set, the following patterns MUST be followed.

Time Selection

Query parameters with regard to time range could be used to select a subset of items in the following manner:

start_time or {property_name}_after: A timestamp (in either Unix time or ISO-8601 format) indicating the start of a temporal range. start_time may be used when there is only one unambiguous time dimension; otherwise, the property name should be used (e.g., processed_after, updated_after). The property SHOULD map to a time field in the representation.
end_time or {property_name}_before: A timestamp (in either Unix time or ISO-8601 format) indicating the end of a temporal range. end_time may be used when there is only one unambiguous time dimension; otherwise, the property name should be used (e.g., processed_before, updated_before). The property SHOULD map to a time field in the representation.
Sorting

Results could be ordered according to sorting related instructions given by the client. This includes sorting by a specific field's value and sorting order as described in the query parameters below.

sort_by: A dimension by which items should be sorted; the dimensions SHOULD be an attribute in the item's representation; the default (ascending or descending) is left to the implementation and MUST be specified in the documentation.
sort_order: The order, one of asc or desc, indicating ascending or descending order.
Pagination

Any resource that could return a large, potentially unbounded list of resources in its GET response SHOULD implement pagination using the patterns described here.

Sample URI path: /accounts?page_size={page_size}&page={page}

Clients MUST assume no inherent ordering of results unless a default sort order has been specified for this collection. It is RECOMMENDED that service implementers specify a default sort order whenever it would be useful.

Query Parameters

page_size: A non-negative, non-zero integer indicating the maximum number of results to return at one time. This parameter:
MUST be optional for the client to provide.
MUST have a default value, for when the client does not provide a value.
page: A non-zero integer representing the page of the results. This parameter:
MUST be optional for the client to provide.
MUST have a default value of 1 for when the client does not provide a value.
MUST respond to a semantically invalid page count, such as zero, with the HTTP status code 400 Bad Request.
If a page number is too large--for instance, if there are only 50 results, but the client requests page_size=100&page=3--the resource MUST respond with the HTTP status code 200 OK and an empty result list.
total_required: A boolean indicating total number of items (total_items) and pages (total_pages) are expected to be returned in the response. This parameter:
SHOULD be optional for the client to provide.
SHOULD have a default value of false.
MAY be used by the client in the very first request. The client MAY then cache the values returned in the response to help build subsequent requests.
SHOULD only be implemented when it will improve API performance and/or it is necessary for front-end pagination display.
Response Properties

The JSON response to a request of this type SHOULD be an object containing the following properties:

items MUST be an array containing the current page of the result list.
Unless there are performance or implementation limitations:
total_items SHOULD be used to indicate the total number of items in the full result list, not just this page.
If total_required has been implemented by an API, then the value SHOULD only be returned when total_required is set to true.
If total_required has not been implemented by an API, then the value MAY be returned in every response if necessary, useful, and performant.
If present, this parameter MUST be a non-negative integer.
Clients MUST NOT assume that the value of total_items is constant. The value MAY change from one request to the next.
total_pages SHOULD be used to indicate how many pages are available, in total.
If total_required has been implemented by an API, then the value SHOULD only be returned when total_required is set to true.
If total_required has not been implemented by an API, then the value MAY be returned in every response if necessary, useful, and performant.
If present, this parameter MUST be a non-negative, non-zero integer.
Clients MUST NOT assume that the value of total_pages is constant. The value MAY change from one request to the next.
links SHOULD be an array containing one or more link relations that are relevant for traversing the result list.
Link Relationships in Pagination

Relationship	Description
self	Refers to the current page of the result list.
first	Refers to the first page of the result list.
last	Refers to the last page of the result list. Returning of this link is optional. You need to return this link only if total_required is specified as a query parameter
next	Refers to the next page of the result list.
prev	Refers to the previous page of the result list.
This is a sample JSON schema that returns a collection of resources with pagination:

{  
    "id":"plan_list:v1",
    "$schema":"http://json-schema.org/draft-04/schema#",
    "description":"Resource representing a list of billing plans with basic information.",
    "name":"plan_list Resource",
    "type":"object",
    "required":true,
    "properties":{
      "plans":{
        "type":"array",
        "description":"Array of billing plans.",
        "items":{
          "type":"object",
          "description":"Billing plan details.",
          "$ref":"plan.json"
        }
      }, 
      "total_items":{
        "type":"string",
        "readonly":true,
        "description":"Total number of items."
      },  
      "total_pages":{
        "type":"string",
        "readonly":true,
        "description":"Total number of pages."
      },
      "links": {
          "type": "array",
          "items": {
              "$ref": "http://json-schema.org/draft-04/hyper-schema#"
          }
      }  
    },
    "links":[
      {
        "href": "https://api.comp.com/v1/payments/billing-plans?page_size={page_size}&page={page}&status={status}",
        "rel": "self"
      },
      {
         "rel":"first",
         "href":"https://api.comp.com/v1/payments/billing-plans?page_size={page_size}&page={page}&start={start_id}&status={status}"
      },
      {
         "rel":"next",
         "href":"https://api.comp.com/v1/payments/billing-plans?page_size={page_size}&page={page+1}&status={status}"
      },
      {
         "rel":"prev",
         "href":"https://api.comp.com/v1/payments/billing-plans?page_size={page_size}&page={page-1}&status={status}"
      },
      {
         "rel":"last",
         "href":"https://api.comp.com/v1/payments/billing-plans?page_size={page_size}&page={last}&status={status}"
      }
   ]
}
This is a sample JSON response that returns a collection of resources with pagination:

{
  "total_items": "166",
  "total_pages": "83",
  "plans": [
    {
      "id": "P-6EM196669U062173D7QCVDRA",
      "state": "ACTIVE",
      "name": "Testing1-Regular3",
      "description": "Create Plan for Regular",
      "type": "FIXED",
      "create_time": "2014-08-22T04:41:52.836Z",
      "update_time": "2014-08-22T04:41:53.169Z",
      "links": [
        {
            "href": "https://api.comp.com/v1/payments/billing-plans/P-6EM196669U062173D7QCVDRA",
            "rel": "self"
        }
      ]
    },
    {
      "id": "P-83567698LH138572V7QCVZJY",
      "state": "ACTIVE",
      "name": "Testing1-Regular4",
      "description": "Create Plan for Regular",
      "type": "INFINITE",
      "create_time": "2014-08-22T04:41:55.623Z",
      "update_time": "2014-08-22T04:41:56.055Z",
      "links": [
        {
            "href": "https://api.comp.com/v1/payments/billing-plans/P-83567698LH138572V7QCVZJY",
            "rel": "self"
        }
      ]
    }
  ],
  "links": [
    {
      "href": "https://api.comp.com/v1/payments/billing-plans?page_size=2&page=3&status=active",
      "rel": "self"
    },
    {
      "href": "https://api.comp.com/v1/payments/billing-plans?page_size=2&page=1&first=3&status=active",
      "rel": "first"
    },
    {
      "href": "https://api.comp.com/v1/payments/billing-plans?page_size=2&page=2&status=active",
      "rel": "prev"
    },
    {
      "href": "https://api.comp.com/v1/payments/billing-plans?page_size=2&page=4&status=active",
      "rel": "next"
    },
    {
      "href": "https://api.comp.com/v1/payments/billing-plans?page_size=2&page=82&status=active",
      "rel": "last"
    }
  ]
}
Updates to Resources
To perform an update to an entire resource, the PUT verb MUST be utilized. The same response body supplied in the resource's GET should be provided in the resource's PUT request body.

If the update is successful, a 204 No Content HTTP status code (with no response body) is appropriate. Where there is a justifying use case (typically to optimize some client interaction), a 200 OK HTTP status code with a response body can be utilized.

While the entire resource must be supplied with the PUT verb, the APIs validation logic can enforce constraints on which fields are allowed to be updated. These fields can be specified as readOnly in the JSON Schema. Typical error handling, utilizing the 400 Bad Request status code, should be applied in cases where the client attempts to update fields which are not allowed or if the resource is in a non-updateable state.

See Sample Input Validation Error Response for examples of error handling.

Partial Responses
An API typically sends back full representation of a resource after processing the requests (GET, POST with 200 OK, PUT/PATCH with 200 OK). For efficiency, the client can ask the API server to return only the fields it is interested in and get a partial response instead.

To request partial response, a client can use the fields query parameter in the request to specify the fields it wants to be returned

For selecting multiple fields, a comma-separated list of fields SHOULD be used.

The following example shows the use of the fields parameter with users API.

Request: HTTP GET without fields parameter

GET https://api.comp.com/v1/users/bob
Authorization: Bearer your_auth_token
Response: The complete resource representation is returned in the response.

{
    "uid": "dbrown",
    "given_name": "David",
    "sn": "Brown",
    "location": "Austin",
    "department": "RISK",
    "title": "Manager",
    "manager": "ipivin",
    "email": "drown@comp.com",
    "employeeId": "234167"
}
Partial Response with the fields query parameter.
Request:

GET https://api.comp.com/v1/users/bob?fields=department,title,location
Authorization: Bearer your_auth_token
The response has only fields specified by the fields query parameter.
Response:

200 OK

{

  "department": "RISK",
  "title": "Manager",
  "location": "Austin",
}
Partial Updates to Resources
In many domains, previously created resources often need to be updated based on customer or facilitator-initiated interactions (like adding items to a cart). In such cases, APIs SHOULD provide an RFC 6902 JSON Patch compatible solution. JSON patches use the HTTP PATCH method defined in RFC 5789 to enable partial updates to resources.

A JSON patch expresses a sequence of operations to apply to a target JSON document. The operations defined by the JSON patch specification include add, remove, replace, move, copy, and test. At comp, to support partial updates to resources, APIs SHOULD support add, remove and replace operations. Support for the other operations (move, copy, and test) is left to the individual API teams based on their needs.

Below is a sample PATCH request to do partial updates to a resource:

PATCH /v1/namespace/resources/:id HTTP/1.1
Host: api.comp.com
Content-Length: 326
Content-Type: application/json-patch+json
If-Match: "etag-value"
[
    {
        "op": "remove",
        "path": "/a/b/c"
    },
    {
        "op": "add",
        "path": "/a/b/c",
        "value": [ "foo", "bar" ]
    },
    {
        "op": "replace",
        "path": "/a/b/c",
        "value": 42
    }
]
The value of path is a string containing a RFC6901 JSON Pointer that references a location within the target document where the operation is performed. For example, the value /a/b/c refers to the element c in the sample JSON below:

{
    "a": {
        "b": {
            "c": "",
            "d": ""
        },
        "e": ""
    }
}
path Parameter

When JSON Pointer is used with arrays, concurrency protection is best implemented with ETags. Contact PPaaS API Design for more guidance on ETags.

In many cases, ETags are not an option: * It is expensive to calculate ETags because the API collates data from multiple data sources or has very large response objects. * The response data are frequently modified.

JSON Pointer Expressions

In cases where ETags are not available to provide concurrency protection when updating arrays, PPaaS has created an extension to RFC6901 which provides expressions of the following form.

"path": "/object-name/@filter-expression/attribute-name"

object-name is the name of the collection.The symbol “@” refers to the current object. It also signals the beginning of a filter-expression.
The filter-expression SHOULD only contain the following operators: a comparison operator (== for equality) or a Logical AND (&&) operator or both. For example:”/address/@id==123/street_name”, “address/@id==123 && primary==true” are valid filter expressions.
The right hand side operand for the operator “==” MUST have a value that matches the type of the left hand side operand. For example: “addresss/@integer_id == 123”,”/address/@string_name == ‘james’”,”/address/@boolean_primary == true”,/address/@decimal_number == 12.1 are valid expressions.
If the right hand operand of "==" is a string then it SHOULD NOT contain any of the following escape sequences: a Line Continuation or a Unicode Escape Sequence.
attribute-name is the name of the attribute to which a PATCH operation is applied if the filter condition is met.
PATCH Array Examples

Example1: "op": "replace","path": “/address/@id==12345/primary”,"value": true
This would set the array element "primary" to true if the the element "id" has a value "12345".
Example2: "op": "replace","path": “/address/@country_code==’GB’ && type==’office’/active”,"value": true
This would set the array element "active" to true if the the element "country_code" equals to "GB" and type equals to "office".

JSON Pointer Expressions Parser Implementations

Java: JSON Pointer Expresssion Parser
Other Implementation Considerations For PATCH

It is not necessary that an API support the updating of all attributes via a PATCH operation. An API implementer SHOULD make an informed decision to support PATCH updates only for a subset of attributes through a specific resource operation.

Responses to a PATCH request

Note that the operations are applied sequentially in the order they appear in the payload. If the update is successful, a 204 No Content HTTP status code (with no response body) is appropriate. Where there is a justifying use case (typically to optimize some client interaction) and the request has the header Prefer:return=representation, a 200 OK HTTP status code with a response body can be utilized.

Responses body with 200 OK SHOULD return the entire resource representation unless the client uses the fields parameter to reduce the response size.

If a PATCH request results in a new resource state that is invalid, the API SHOULD return a 400 Bad Request or 422 Unprocessable Entity.

See Sample Input Validation Error Response for examples of error handling.

PATCH With Partial Responses

When returning the complete representation of a resource for 200 OK cases, the client can further reduce the size of the response by using the fields query parameter. Given below is an example request.

Example of a PATCH request that usesfields query param to reduce the response size

PATCH https://api.comp.com/v1/users/bob?fields=department,title,location
Authorization: Bearer API_auth_token
Content-Type: application/json
Prefer:return=representation

[
   {
        "op": "replace",
        "path": "/department",
        "value": "ISM"
    },
   {
        "op": "replace",
        "path": "/title",
        "value": "Senior Manager"
    },
    {
        "op": "replace",
        "path": "/location",
        "value": "SanJose"
    }
]

The API responds with a 200 OK  HTTP status code, and the partial representation of the updated resource.

200 OK
ETag: “newETagString"

{

  "department": "ISM",
  "title": "Senior Manager",
  "location": "San Jose"
}
PATCH Examples

PATCH examples for modifying objects can be found here.

Deleting Resources
For a number of reasons, some data exposed as a resource MAY disappear: because it has been specifically deleted, because it expired, because of a policy (e.g., only transactions less than 2 years old are available), etc.

Services MAY return a 410 Gone error to a request related to a resource that no longer exists. However, there may be significant costs associated with doing so. Service designers are advised to weigh in those costs and ways to reduce them (e.g., using resource identifiers that can be validated without access to a data store), and MAY return a 404 Not Found instead if those costs are prohibitive.

Asynchronous Operations
Certain types of operations might require processing of the request in an asynchronous way (e.g. validating a bank account, processing an image, etc.) to avoid long delays on the client side and prevent long-standing open client connections waiting for the operations to complete. For such use cases, APIs MUST employ the following pattern:

For POST requests:

Return the 202 Accepted HTTP response code.
In the response body, include one or more URIs as hypermedia links, which could include:
The final URI of the resource where it will be available after completion if the ID and path are already known. Clients can then make an HTTP GET request to that URI in order to obtain the completed resource. Until the resource is ready, the final URI SHOULD return the HTTP status code 404 Not Found.
{ "rel": "self", "href": "/v1/namespace/resources/{resource_id}", "method": "GET" }
A temporary request queue URI where the status of the operation may be obtained via some temporary identifier. Clients SHOULD make an HTTP GET request to obtain the status of the operation which MAY include such information as completion state, ETA, and final URI once it is completed.
{ "rel": "self", "href": "/v1/queue/requests/{request_id}, "method": "GET" }"
For PUT/PATCH/DELETE/GET requests:

Like POST, you can support PUT/PATCH/DELETE/GET to be asynchronous. The behaviour would be as follows:

Return the 202 Accepted HTTP response code.
In the response body, include one or more URIs as hypermedia links, which could include:
A temporary request queue URI where the status of the operation may be obtained via some temporary identifier. Clients SHOULD make an HTTP GET request to obtain the status of the operation which MAY include such information as completion state, ETA, and final URI once it is completed.
{ "rel": "self", "href": "/v1/queue/requests/{request_id}, "method": "GET" }"
APIs that support both synchronous and asynchronous processing for an URI:

APIs that support both synchronous and asynchronous operations for a particular URI and an HTTP method combination, MUST implement the Prefer header and exhibit following behavior:

If the request contains a Prefer=respond-async header, the service MUST switch the processing to asynchronous mode.
If the request doesn't contain a Prefer=respond-async header, the service MUST process the request synchronously.
See an example of a PPaaS API emitting such behaviour, for guidance on the implementation.

Additionally, It is desirable that all external APIs that implement asynchronous processing, support webhooks as a mechanism of pushing the processing status to the client.

Please contact the platform team if you are planning to support this in your APIs, so we can collaborate on building support for this in the platform itself.

File Uploads
Certains types of API operations require uploading a file (e.g. jpeg, png, pdf) as part of the API call. Services for such use cases, MUST not support or allow encoding the file content within a JSON body using Base64 encoding.

For performing file uploads, one of the following options SHOULD be employed.

File uploads as an isolated operation

Services supporting such an operation SHOULD provide a separate dedicated URI for uploading and retrieving the files. Clients of such services upload the files using the file upload URI and retrieve the file metadata as part of the response to an upload operation.

Format of the file upload request SHOULD conform to multipart/form-data content type (RFC 2388).

Example of a multipart/form-data request:

The client first uploads the file using a file-upload URI provided by the service.

POST /v1/identity/limit-resolution-files

Content-Type: multipart/form-data; boundary=foo_bar_baz
Authorization: Bearer YOUR_ACCESS_TOKEN_HERE
MIME-Version: 1.0

--foo_bar_baz
Content-Type: text/plain
Content-Disposition: form-data; name="title"

Identity Document
--foo_bar_baz
Content-Type: image/jpeg
Content-Disposition: form-data; filename="passport.jpg"; name="artifact"

...(binary bytes of the image)...
--foo_bar_baz--
Sample file upload response:

If the file upload is successful, the server responds with the metadata of the uploaded file.

{
    "id": "file_egflf465vbk7468mvnb",
    "created_at": 748557607545,
    "size" : 3457689458369,
    "url" : "https://api.comp.com/v1/files/file_egflf465vbk7468mvnb"
    "type" : "image/jpeg" 
}      
The client can use the uploaded file's URI (received in the above response) for any subsequent operation that requires the already uploaded file.

Example Request

POST /v1/identity/limits-resolutions
Host: www.api.comp.com
Content-Type: application/json
Authorization: Bearer oauth2_token

{
    ...
    "identity_document_reference" : "https://api.comp.com/v1/files/file_egflf465vbk7468mvnb"

}
Note: Internal services MAY also explore using comp internal file services, MediaServ and DMS to perform file operations if these meet the API's performance and availability requirements.

Combining file upload with request processing

This option SHOULD be used if you have to combine the uploading of a file with an API request body or parameters in one API request (For the purpose of optimization or to process both the file upload and request data in an atomic manner).

For such type use cases, the request SHOULD either be a multipart/mixed or a multipart/related (RFC 2387) type. Given below is an example of such a request.

Example of a multipart/related request:

The first part in the below multipart request is the request metadata, while the second part contains the binary file content

POST /v1/identity/limits-resolutions
Host: www.api.comp.com
Content-Type: multipart/related; boundary=foo_bar_baz
Authorization: Bearer oauth2_token

--foo_bar_baz
Content-Type: application/json; charset=UTF-8

{
  ...
}

--foo_bar_baz
Content-Type: image/jpeg

[JPEG_DATA]
--foo_bar_baz--
External Identifiers
Merchants and merchant facilitators make multiple API calls across different comp domains (Payments, Invoicing, Offers, etc.) to record data, manage different resources, etc. Risk and several other underlying core services need to have a way to correlate those calls such that they can utilize the information across multiple calls to make better risk and fraud decisions.

Client-side

The client MUST use the comp-CLIENT-METADATA-ID header to pass a unique identifier. This header deprecates the comp-CLIENT-METADATA-ID header.
Server-side

If a comp-CLIENT-METADATA-ID header is required but missing, the service MUST reply with a 400 error and an information_link pointing to the public documentation about this pattern.
If a comp-CLIENT-METADATA-ID header is optional and missing, the service MUST behave normally, and merchant GUID will be recorded in the back end.
If a comp-CLIENT-METADATA-ID header is provided, the service MUST record it along with the other transactional information.
For other errors, the service MUST return the appropriate error message.
Other Patterns
Other patterns will be defined with time. Designers of new services SHOULD refer to the RESTful Web Services Cookbook at Safari Books Online for other useful patterns.
